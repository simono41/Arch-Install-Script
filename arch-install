#!/bin/bash
#
set -ex
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi
echo "Als root Angemeldet"

function swap {
  #swap
  fallocate -l 512M /mnt/swapfile
  chmod 600 /mnt/swapfile
  mkswap /mnt/swapfile
  echo "/swapfile none swap defaults 0 0" >> /mnt/etc/fstab
}

function anwendungen(parameter) {
  #statements
  if [ "$anwendungen" == "y" ]
  then
    arch-chroot /mnt pacman -Sy xorg-server xorg-xinit xorg-utils xorg-server-utils xorg-drivers \
    xf86-input-synaptics ttf-dejavu xscreensaver \
    xorg-twm xorg-xclock xterm alsa-utils pulseaudio pulseaudio-alsa
    arch-chroot /mnt pacman -Sy firefox firefox-i18n-de vlc mplayer brasero libreoffice-fresh libreoffice-fresh-de gimp \
    inkscape audacity atom mumble netbeans jdk8-openjdk cups hplip openssh \
    kdenlive freeciv minetest teeworlds \
    obs-studio chromium ardour hydrogen python python-pip git wine \
    murmur snapd apache docker
    arch-chroot /mnt pacman -Sy nvidia nvidia-libgl nvidia-settings lib32-nvidia-libgl steam wine_gecko wine-mono
  fi
}













if [ "$1" != "n" ]
then
  read -p "Soll im Internet geguckt werden ob es ein neues Install-Script gibt und dann ausgefuehrt werden?: [Y/n] " update
  if [ "$update" != "n" ]
  then
    if [ -f /root/arch-install.new ]
    then
      rm /root/arch-install.new
    else
      echo "arch-install.new nicht vorhanden!"
    fi
    wget https://raw.githubusercontent.com/simono41/Arch-Install-Script/master/arch-install -t 0 --output-document=/root/arch-install.new
    chmod +x /root/arch-install.new
    /root/arch-install.new n
    exit 0
  fi
else
  echo "Bereits neue Version im Internet!"
fi
# Partionierung
# GPT oder MBR
read -p "Wie heissen sie?: " name
echo ""
echo "GPT = GUID Partition Table 64 Bit UEFI"
echo "Empfohlen fuer Neuere PCs"
echo "WICHTIG DAFUER MUESSEN SIE IM BOOTMENUE DEN UEFI USB_STICK AUSGEWAEHLT HABEN SONST KANN KEIN UEFI BOOTEINTRAG ERSTELLT WERDEN!!!"
echo ""
echo "MBR = Master Boot Record 32 Bit Legacy"
echo "Empfohlen fuer Alte PCs und portable USB-Sticks"
echo ""
echo "Bitte die Eingaben klein schreiben :D !!!"
echo ""
read -p "Wie moechten sie ihre Festplatte partioniert haben: gpt oder mbr: " Partition
fdisk -l
read -p "Geben sie eine Festplatte an: sda,sdb,sdc: " device
read -p "Welches Passwort soll der Root erhalten?: " pass
echo "Mit einer Online Installation können sie ihr persönliches Linux gestalten :D"
read -p "Soll eine Offline Installation durchgeführt werden?: [Y/n] " offline
if [ "$offline" == "n" ]
then
  read -p "Sollen Aktualisierungen installiert werden?: [y/N] " aktu
fi
read -p "Sollen Anwendungen nachinstalliert werden?: [y/N] " anwendungen
read -p "Sollen unfreie nvidia-treiber aktiviert werden?: [y/N] " nvidia
if [ "$Partition" == "gpt" ]
then
  read -p "Soll mit systemd gebootet werden oder mit grub? [SYSTEMD/grub] : " boot
fi
read -p "Wie groß soll die System-Partition sein? (wenn nichts eingetragen wird wird die volle Festplatte benutzt!!!): z.b +20G : " speicher
#
echo "Name: $name"
echo "Laufwerk: /dev/"$device""
echo "Partionsart: $Partition"
echo "Passwort: $pass"
echo "Offline installation: $offline"
echo "Architektur: $(uname -m)"
echo "NVIDIA Treiber: $nvidia"
echo "Aktualisierungen: $aktu"
echo "Systemgroesse: $speicher"
#
read -p "Sind alle Angaben Richtig?: [y/N] " sicherheitsabfrage
if [ "$sicherheitsabfrage" != "y" ]
then
  echo "ABGEBROCHEN"
  exit 1
fi
#
if cat /proc/mounts | grep /dev/"$device"1 > /dev/null; then
  echo "gemountet"
  umount /dev/"$device"1
else
  echo "nicht gemountet"
fi
#
if cat /proc/mounts | grep /dev/"$device"2 > /dev/null; then
  echo "gemountet"
  umount /dev/"$device"2
else
  echo "nicht gemountet"
fi
#
if cat /proc/mounts | grep /dev/"$device"3 > /dev/null; then
  echo "gemountet"
  umount /dev/"$device"2
else
  echo "nicht gemountet"
fi
#
if cat /proc/mounts | grep /mnt > /dev/null; then
  echo "gemountet"
  umount /mnt
else
  echo "nicht gemountet"
fi
#
echo "Eine Säuberung erhört die chance der Installation auf dem System."
echo "Es kann eine Zeit lang dauern!"
dd if=/dev/zero of=/dev/$device bs=64M count=10 status=progress
#
if [ "$aktu" == "y" ]
then
  pacman -Sy arch-install-scripts xorriso cdrtools squashfs-tools wget dosfstools btrfs-progs gdisk
fi
#
if [ "$Partition" == "gpt" ]
then
  echo "Partioniere in GPT"
    gdisk "/dev/$device" <<EOT
2
p
o
y
n


+512M
ef00
p
n


${speicher}
8300
p
w
y
EOT
  echo "format"
  mkfs.ext4 -L p_arch /dev/"$device"2
  mkfs.fat -F32 /dev/"$device"1
  echo "mount"
  mount /dev/"$device"2 /mnt
  mkdir /mnt/boot
  mount /dev/"$device"1 /mnt/boot
  echo ""
  if [ "$offline" != "n" ]
  then
    if [ -f /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs ]
    then
      echo "Es ist kein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs
    else
      echo "Es ist ein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/copytoram/airootfs.sfs
    fi
    echo ""
    echo "HOOKS=\"systemd block filesystems\"" > /mnt/etc/mkinitcpio.conf
    echo "COMPRESSION=\"gzip\"" >> /mnt/etc/mkinitcpio.conf
    echo ""
    echo ""
    if [ "$nvidia" == "y" ]
    then
      arch-chroot /mnt nvidia-xconfig
    fi
    #cp /etc/X11/xinit/xinitrc /mnt/etc/X11/xinit/xinitrc
    #
  else
    pacstrap -i /mnt base base-devel syslinux efibootmgr efitools grub intel-ucode os-prober btrfs-progs dosfstools arch-install-scripts wget gdisk squashfs-tools
  fi
  anwendungen
  echo ""
  genfstab -Up /mnt >> /mnt/etc/fstab
  echo "swap"
  swap
  echo ""
  echo "$name"-os > /mnt/etc/hostname
  echo ""
arch-chroot /mnt /bin/bash <<EOT
mkinitcpio -p linux
passwd
$pass
$pass
EOT
  echo ""
  if [ "$boot" == "grub" ]
  then
arch-chroot /mnt /bin/bash <<EOT
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id="$name"-os --recheck
grub-mkconfig -o /boot/grub/grub.cfg
EOT
  else
    tobootdevice=$(blkid -s PARTUUID -o value /dev/"$device"2)

    mkdir -p /mnt/boot/EFI/systemd/
    mkdir -p /mnt/boot/EFI/BOOT/
    cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/systemd/systemd-bootx64.efi
    cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/BOOT/BOOTX64.EFI

    mkdir -p /mnt/boot/loader/entries/
    echo "title    "$name"-os" > /mnt/boot/loader/entries/arch-uefi.conf
    echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch-uefi.conf
    echo "initrd   /initramfs-linux.img" >> /mnt/boot/loader/entries/arch-uefi.conf
    echo "options  root=PARTUUID=${tobootdevice} rw" >> /mnt/boot/loader/entries/arch-uefi.conf

    echo "title    "$name"-os" > /mnt/boot/loader/entries/arch-uefi-fallback.conf
    echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf
    echo "initrd   /initramfs-linux-fallback.img" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf
    echo "options  root=PARTUUID=${tobootdevice} rw" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf

    echo "default   arch-uefi" > /mnt/boot/loader/loader.conf
    echo "timeout   1" >> /mnt/boot/loader/loader.conf

  fi

  if [ "$aktu" == "y" ]
  then
    arch-chroot /mnt pacman -Syu
  fi
  echo ""
  if [ -f /mnt/usr/share/applications/arch-install.desktop ]
  then
    rm /mnt/usr/share/applications/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/root/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/root/Schreibtisch/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/home/user/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/home/user/Schreibtisch/arch-install.desktop
  fi
  echo ""
  echo "Fertig"
elif [ "$Partition" == "mbr" ]
then
  echo "Partioniere in MBR"
      fdisk -W always "/dev/$device" <<EOT
p
o
n



+512M
p
n



${speicher}
p
w
y
EOT
  echo "format"
  mkfs.ext4 /dev/"$device"2
  mkfs.fat -F 32 /dev/"$device"1
  echo "mount"
  mount /dev/"$device"2 /mnt
  mkdir /mnt/boot
  mount /dev/"$device"1 /mnt/boot
  echo ""
  if [ "$offline" != "n" ]
  then
    if [ -f /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs ]
    then
      echo "Es ist kein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs
    else
      echo "Es ist ein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/copytoram/airootfs.sfs
    fi
    echo ""
    echo "HOOKS=\"systemd block filesystems\"" > /mnt/etc/mkinitcpio.conf
    echo "COMPRESSION=\"gzip\"" >> /mnt/etc/mkinitcpio.conf
    echo ""
    echo ""
    if [ "$nvidia" == "y" ]
    then
      arch-chroot /mnt nvidia-xconfig
    fi
    #cp /etc/X11/xinit/xinitrc /mnt/etc/X11/xinit/xinitrc
    #
  else
    pacstrap -i /mnt base base-devel syslinux efibootmgr efitools grub intel-ucode os-prober btrfs-progs dosfstools arch-install-scripts wget gdisk squashfs-tools
  fi
  anwendungen
  echo ""
  genfstab -Up /mnt >> /mnt/etc/fstab
  echo "swap"
  swap
  echo ""
  echo "$name"-os > /mnt/etc/hostname
  echo ""
arch-chroot /mnt /bin/bash <<EOT
mkinitcpio -p linux
passwd
$pass
$pass
grub-install --target=i386-pc --recheck /dev/"$device"
grub-mkconfig -o /boot/grub/grub.cfg
EOT
  if [ "$aktu" == "y" ]
  then
    arch-chroot /mnt pacman -Syu
  fi
  if [ -f /mnt/usr/share/applications/arch-install.desktop ]
  then
    rm /mnt/usr/share/applications/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/root/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/root/Schreibtisch/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/home/user/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/home/user/Schreibtisch/arch-install.desktop
  fi
  echo ""
  echo "Fertig"
else
  echo "Eingabe Ungueltig"
  exit 1
fi
echo ""
if [ "$offline" == "n" ]
then
  if [ -f /root/arch-graphical-install ]
  then
    rm /root/arch-graphical-install
  else
    echo "arch-graphical-install nicht vorhanden!"
  fi
  wget https://github.com/simono41/Arch-Install-Script/raw/master/arch-graphical-install -t 0 --output-document=/mnt/root/arch-graphical-install
  chmod +x /mnt/root/arch-graphical-install
  arch-chroot /mnt /root/arch-graphical-install n
fi
echo ""
echo "Fertig!!!"
read -p "Installation erfolgreich Abgeschlossen. Wollen sie den PC NEUSTARTEN?: [Y/n] " sicherheitsabfrage1
if [ "$sicherheitsabfrage1" != "n" ]
then
  echo "starte neu"
  reboot
fi
exit 0
