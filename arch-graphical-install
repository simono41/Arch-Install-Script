#!/bin/bash
#
set -x

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi
echo "Als root Angemeldet"
#

function adduser {
  read -p "Wie soll der neue Benutzer heissen?: " user
  read -p "Welches Passwort soll "$user" bekommen?: " pass
  echo "adduser "$user""
  useradd $user
passwd $user <<EOT
$pass
$pass
EOT
  echo ""$user" ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
}

function userrechte {
  chmod 770 -R -v /home/"$user"/
  chown -R -v "$user":"$user" /home/"$user"
  chmod -R -v u+rwX /home/"$user"
  chmod 755 /home/"$user"
}

function wifi {
  echo "Wifi wird eingerichtet!"
  ip link
  read -p "Wie heisst das wlan-modul?: " modul
  ip link set dev "$modul" up
  sleep 5
  iw dev "$modul" scan > scan.txt
  nano scan.txt
  read -p "Wie heisst das Netzwerk?: " network
  read -p "Wie heisst das Passwort?: " passwort
  wpa_passphrase  "$network"  "$passwort"  > /etc/wpa_supplicant/wpa_supplicant-"$modul".conf
  wpa_supplicant -B -i "$modul" -c /etc/wpa_supplicant/wpa_supplicant-"$modul".conf
  dhcpcd "$modul"
}

function ethernet {
  ip link
  read -p "Wie heisst das Ethernet-modul?: " ethernetmodul
  echo "dhcpcd wird gestartet!"
  dhcpcd "$ethernetmodul"
}

function links {
  #
  mkdir -p /home/"$user"/Schreibtisch/
  cp /usr/share/applications/arch-install.desktop /home/"$user"/Schreibtisch/arch-install.desktop
  chmod +x /home/"$user"/Schreibtisch/arch-install.desktop
  #
  mkdir -p /root/Schreibtisch/
  cp /usr/share/applications/arch-install.desktop /root/Schreibtisch/arch-install.desktop
  chmod +x /root/Schreibtisch/arch-install.desktop
}

function gnomeconfig {
  mkdir -p /home/"$user"/.config/gtk-3.0/
  echo "[Settings]" > /home/"$user"/.config/gtk-3.0/settings.ini
  echo "gtk-theme-name = Adwaita" >> /home/"$user"/.config/gtk-3.0/settings.ini
  echo "# next option is applicable only if selected theme supports it" >> /home/"$user"/.config/gtk-3.0/settings.ini
  echo "gtk-application-prefer-dark-theme = true" >> /home/"$user"/.config/gtk-3.0/settings.ini
  echo "# set font name and dimension" >> /home/"$user"/.config/gtk-3.0/settings.ini
  echo "gtk-font-name = Sans 10" >> /home/"$user"/.config/gtk-3.0/settings.ini

  mkdir -p /home/"$user"/.local/share/applications/
  echo "[Default Applications]" > /home/"$user"/.local/share/applications/mimeapps.list
  echo "inode/directory=org.gnome.Nautilus.desktop" >> /home/"$user"/.local/share/applications/mimeapps.list

  mkdir -p /root/.config/gtk-3.0/
  echo "[Settings]" > /root/.config/gtk-3.0/settings.ini
  echo "gtk-theme-name = Adwaita" >> /root/.config/gtk-3.0/settings.ini
  echo "# next option is applicable only if selected theme supports it" >> /root/.config/gtk-3.0/settings.ini
  echo "gtk-application-prefer-dark-theme = true" >> /root/.config/gtk-3.0/settings.ini
  echo "# set font name and dimension" >> /root/.config/gtk-3.0/settings.ini
  echo "gtk-font-name = Sans 10" >> /root/.config/gtk-3.0/settings.ini

  mkdir -p /root/.local/share/applications/
  echo "[Default Applications]" > /root/.local/share/applications/mimeapps.list
  echo "inode/directory=org.gnome.Nautilus.desktop" >> /root/.local/share/applications/mimeapps.list
}

function minimalinstallation {
  read -p "Wollen sie eine volle Installation durchfÃ¼hren?: [Y/n] " minimal
  if [ "$minimal" != "n" ]
  then
    pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils xorg-drivers \
    xf86-input-synaptics ttf-dejavu xscreensaver \
    xorg-twm xorg-xclock xterm alsa-utils pulseaudio pulseaudio-alsa
    pacman -S firefox firefox-i18n-de vlc mplayer brasero libreoffice-fresh libreoffice-fresh-de gimp \
    inkscape audacity atom nvidia nvidia-libgl nvidia-settings lib32-nvidia-libgl steam \
    mumble netbeans jdk8-openjdk cups hplip openssh kdenlive freeciv minetest teeworlds \
    obs-studio chromium ardour hydrogen python python-pip
  fi
}







#
read -p "Wollen sie einen neuen Benutzer erstellen?: [y/N] " erstellen
if [ "$erstellen" == "y" ]
then
  adduser
  userrechte
  links
else
  read -p "Wie heisst der normale Benutzer auf dem PC?: " user
  userrechte
  links
  #
  read -p "Soll "$user" root-rechte gegeben werden?: [y/N] " root
  if [ "$root" == "y" ]
  then
    echo ""$user" ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
  fi
fi
#
if [ "$1" != "n" ]
then
  read -p "Ist das ein Raspberry PI ?: [y/N] " pi
  read -p "Wollen sie eine Verbindung mit Ethernet aufbauen?: [y/N] " ethernet
  if [ "$ethernet" == "y" ]
  then
    ethernet
  else
    echo "Ethernet wird nicht eingerichtet!"
  fi
  #
  read -p "Wollen sie eine Verbindung mit wifi verbindung aufbauen?: [y/N] " wifi
  if [ "$wifi" == "y" ]
  then
    wifi
  else
    echo "Wifi wird nicht eingerichtet!"
  fi
  #
  pacman-key --init
  pacman-key --populate archlinux
  #
  read -p "Soll murmur mitinstalliert werden?: [Y/n] " murmur
  if [ "$murmur" != "n" ]
  then
    pacman -S murmur
    systemctl enable murmur
    read -p "Wie soll das Passwort vom murmur-server sein?: " murmurpass
    murmurd -ini /etc/murmur.ini -supw $murmurpass
  fi
  #
  read -p "Soll snapd mitinstalliert werden?: [Y/n] " snapd
  if [ "$snapd" != "n" ]
  then
    pacman -S snapd
    systemctl enable snapd.socket
  fi
  #
  read -p "Soll apache mitinstalliert werden?: [Y/n] " apache
  if [ "$apache" != "n" ]
  then
    pacman -S apache
    systemctl enable httpd
  fi
  #
  read -p "Sollen docker mitinstalliert werden?: [Y/n] " docker
  if [ "$docker" != "n" ]
  then
    pacman -S docker
    systemctl enable docker
  fi
  #
  if [ "$pi" != "y" ]
  then
    #
    read -p "Soll Nvidia mitinstalliert werden?: [Y/n] " nvidia
    if [ "$nvidia" != "n" ]
    then
      pacman -S nvidia nvidia-libgl nvidia-settings lib32-nvidia-libgl
      read -p "Soll nvidia-xconfig gestartet werden?: [y/N] " nvidiax
      if [ "$nvidiax" == "y" ]
      then
        nvidia-xconfig
      fi
    fi
    #
  fi
  #
  if [ "$pi" == "y" ]
  then
    read -p "Soll der omxplayer mitinstalliert werden?: [Y/n] " omxplayer
    if [ "$omxplayer" != "n" ]
    then
      pacman -S omxplayer
    fi
  fi
fi
#
minimalinstallation
#
read -p "Soll yaourt mitinstalliert werden?: [Y/n] " yaourt
if [ "$yaourt" != "n" ]
then
  cd /home/"$user"/
  pwd
  su "$user" -c "curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/package-query.tar.gz"
  pwd
  su "$user" -c "tar -xvzf package-query.tar.gz"
  pwd
  cd package-query
  pwd
  su "$user" -c "makepkg -si"
  pwd
  cd ..
  pwd
  su "$user" -c "curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/yaourt.tar.gz"
  pwd
  su "$user" -c "tar -xvzf yaourt.tar.gz"
  pwd
  cd yaourt
  pwd
  su "$user" -c "makepkg -si"
  pwd
  cd ..
  pwd
  su "$user" -c "yaourt -Syu"
  su "$user" -c "mkdir -p /home/"$user"/aur-pakete"
  su "$user" -c "yaourt -S pamac-aur --export /home/"$user"/aur-pakete"
  pwd
  #
  read -p "Soll google-chrome mitinstalliert werden?: [Y/n] " chrome
  if [ "$chrome" != "n" ]
  then
    su "$user" -c "yaourt -S google-chrome --export /home/"$user"/aur-pakete"
  fi
  #
  read -p "Soll discord mitinstalliert werden?: [Y/n] " discord
  if [ "$discord" != "n" ]
  then
    su "$user" -c "yaourt -S discord --export /home/"$user"/aur-pakete"
  fi
  #
  read -p "Soll spotify mitinstalliert werden?: [Y/n] " spotify
  if [ "$spotify" != "n" ]
  then
    su "$user" -c "yaourt -S spotify --export /home/"$user"/aur-pakete"
  fi
  #
  read -p "Soll xboxdrv mitinstalliert werden?: [Y/n] " xboxdrv
  if [ "$xboxdrv" != "n" ]
  then
    su "$user" -c "yaourt -S xboxdrv --export /home/"$user"/aur-pakete"
  fi
  read -p "Soll telegram mitinstalliert werden?: [Y/n] " telegram
  if [ "$telegram" != "n" ]
  then
    su "$user" -c "yaourt -S telegram-desktop --export /home/"$user"/aur-pakete"
  fi
fi
echo "Packetliste2 Ende"
echo "Beginne mit dem Konfigurieren des Systems :D"
# set desktop
echo "set desktops"
#
read -p "Welcher desktop soll verwendet werden? all, lxde, gnome, gnome-flashback, mate, xfce4, kde, cinnamon oder lxqt : " rootstart

if [ "$rootstart" == "gnome" ] || [ "$rootstart" == "all" ]
then
  pacman -S gnome gnome-extra network-manager-applet networkmanager system-config-printer blueman gnome-power-manager gnome-screensaver
  echo "exec gnome-session" > /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
  read -p "Soll gnome classic benutzt werden? [Y/n] " classic
  if [ "$classic" != "n" ]
  then
    echo "export XDG_CURRENT_DESKTOP=GNOME-Classic:GNOME" > /etc/X11/xinit/xinitrc
    echo "export GNOME_SHELL_SESSION_MODE=classic" >> /etc/X11/xinit/xinitrc
    echo "exec gnome-session --session=gnome-classic" >> /etc/X11/xinit/xinitrc
  fi
  #
  gnomeconfig
  #
fi

if [ "$rootstart" == "gnome-flashback" ] || [ "$rootstart" == "all" ]
then
  pacman -S gnome-flashback gnome gnome-extra network-manager-applet networkmanager system-config-printer blueman gnome-power-manager gnome-screensaver
  echo "export XDG_CURRENT_DESKTOP=GNOME-Flashback:GNOME" > /etc/X11/xinit/xinitrc
  echo "exec gnome-session --session=gnome-flashback-metacity" >> /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
  #
  gnomeconfig
  #
fi

if [ "$rootstart" == "cinnamon" ] || [ "$rootstart" == "all" ]
then
  pacman -S cinnamon gnome gnome-extra network-manager-applet networkmanager system-config-printer blueman gnome-power-manager gnome-screensaver
  echo "exec cinnamon-session" > /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
fi

if [ "$rootstart" == "mate" ] || [ "$rootstart" == "all" ]
then
  pacman -S mate mate-extra network-manager-applet networkmanager system-config-printer blueman mate-power-manager gtk-engine-murrine
  echo "exec mate-session" > /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
fi

if [ "$rootstart" == "lxde" ] || [ "$rootstart" == "all" ]
then
  pacman -S lxde networkmanager network-manager-applet xfce4-power-manager
  echo "exec startlxde" > /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
fi

if [ "$rootstart" == "lxqt" ] || [ "$rootstart" == "all" ]
then
  pacman -S lxqt networkmanager network-manager-applet lxqt-powermanagement
  echo "exec startlxqt" > /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
fi

if [ "$rootstart" == "xfce4" ] || [ "$rootstart" == "all" ]
then
  pacman -S xfce4 xfce4-goodies human-icon-theme networkmanager network-manager-applet xfce4-power-manager
  echo "exec startxfce4" > /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
fi

if [ "$rootstart" == "kde" ] || [ "$rootstart" == "all" ]
then
  pacman -S plasma kde-l10n-de kde-applications networkmanager network-manager-applet
  echo "exec startkde" > /etc/X11/xinit/xinitrc
  systemctl enable NetworkManager.service
fi

if [ "$rootstart" == "all" ]
then
  echo "exec startlxde" > /etc/X11/xinit/xinitrc
fi

#
echo "Systemsprache und dienste werden erstellt!"
# localectl set-x11-keymap de pc105 nodeadkeys

echo "Section \"InputClass\"" > /etc/X11/xorg.conf.d/20-keyboard.conf
echo "        Identifier \"keyboard\"" >> /etc/X11/xorg.conf.d/20-keyboard.conf
echo "        MatchIsKeyboard \"yes\"" >> /etc/X11/xorg.conf.d/20-keyboard.conf
echo "        Option \"XkbLayout\" \"de\"" >> /etc/X11/xorg.conf.d/20-keyboard.conf
echo "        Option \"XkbModel\" \"pc105\"" >> /etc/X11/xorg.conf.d/20-keyboard.conf
echo "        Option \"XkbVariant\" \"nodeadkeys\"" >> /etc/X11/xorg.conf.d/20-keyboard.conf
echo "EndSection" >> /etc/X11/xorg.conf.d/20-keyboard.conf

# set system startup files
echo "System startup files"
if [ "$wifi" == "y" ]
then
  systemctl enable wpa_supplicant@"$modul".service
  systemctl enable dhcpcd@"$modul"
else
  systemctl disable dhcpcd
fi

read -p "Soll getty den X-Server automatisch starten?: [Y/n] " getty

if [ "$getty" != "n" ] #1
then
  echo "if [ \$(tty) = "/dev/tty1" ]; then" > /root/.bash_profile
  echo "startx" >> /root/.bash_profile
  echo "fi" >> /root/.bash_profile
  #
  echo "if [ \$(tty) = "/dev/tty1" ]; then" > /home/"$user"/.bash_profile
  echo "startx" >> /home/"$user"/.bash_profile
  echo "fi" >> /home/"$user"/.bash_profile
  #

  read -p "Welcher Nutzer soll automatisch gestartet werden?: ["$user"/root] " start
  if [ "$start" == "root" ] #2
  then
    mkdir -p /etc/systemd/system/getty\@tty1.service.d
    echo "[Service]" > /etc/systemd/system/getty\@tty1.service.d/autologin.conf
    echo "ExecStart=" >> /etc/systemd/system/getty\@tty1.service.d/autologin.conf
    echo "ExecStart=-/sbin/agetty --noclear -a root %I 38400 linux" >> /etc/systemd/system/getty\@tty1.service.d/autologin.conf
    systemctl enable getty@tty1
  else
    mkdir -p /etc/systemd/system/getty\@tty1.service.d
    echo "[Service]" > /etc/systemd/system/getty\@tty1.service.d/autologin.conf
    echo "ExecStart=" >> /etc/systemd/system/getty\@tty1.service.d/autologin.conf
    echo "ExecStart=-/sbin/agetty --noclear -a "$user" %I 38400 linux" >> /etc/systemd/system/getty\@tty1.service.d/autologin.conf
    systemctl enable getty@tty1
  fi #2

else

  read -p "Soll xdm wenn der PC bootet gestartet werden?: [Y/n] " xdm
  if [ "$xdm" != "n" ] #3
  then
    systemctl enable xdm

  fi #3


fi #1


systemctl enable acpid
systemctl enable ntpd
systemctl enable avahi-daemon
systemctl enable org.cups.cupsd.service
systemctl enable sshd
# set systemconfiguration
echo "systemconfiguration"
#
echo "LANG=de_DE.UTF-8" > /etc/locale.conf
echo "LC_COLLATE=C" >> /etc/locale.conf
echo "LANGUAGE=de_DE" >> /etc/locale.conf
#
echo "KEYMAP=de-latin1" > /etc/vconsole.conf
echo "FONT=lat9w-16" >> /etc/vconsole.conf
#
echo "de_DE.UTF-8 UTF-8" > /etc/locale.gen
echo "de_DE ISO-8859-1" >> /etc/locale.gen
echo "de_DE@euro ISO-8859-15" >> /etc/locale.gen
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
#
locale-gen
#
rm /etc/localtime
ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime

read -p "Sollen noch Packete hinzugefÃ¼gt oder entfernt werden? [Y/n] " packete
while [ "$packete" != "n" ]
do
  read -p "Sollen sonst noch Packete hinzugefÃ¼gt werden? [Packetnamen] : " packete
  pacman -Syu $packete
  read -p "Sollen sonst noch Packete entfernt werden? [Packetnamen] : " rpackete
  pacman -Rss $rpackete
  read -p "Soll noch ein Befehl eingegeben werden? [Befehl] : " befehl
  $befehl
  read -p "Sollen sonst noch Packete hinzugefÃ¼gt oder entfernt werden? [Y/n] " packete
done

userrechte

#
#systemctl start ntpd
#ntpd -gq
#date
#hwclock -w
#
#xset m 2/1 0
#

echo "Fertig!!!"
