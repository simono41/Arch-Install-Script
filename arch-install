#!/bin/bash
#
set -ex

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi
echo "Als root Angemeldet"

function swapfile() {
  #swap
  fallocate -l 512M /mnt/swapfile
  chmod 600 /mnt/swapfile
  mkswap /mnt/swapfile
  echo "/swapfile none swap defaults 0 0" >> /mnt/etc/fstab
}

function adduser() {
  arch-chroot /mnt useradd -m -g users -s /bin/bash $username
arch-chroot /mnt passwd ${username} <<EOT
${userpass}
${userpass}
EOT
  mkdir -p /mnt/home/"$username"/
  echo ""$username" ALL=(ALL) NOPASSWD: ALL" >> /mnt/etc/sudoers
  echo ""
  if [ -d /mnt/home/user/.config ]
  then
    cp -R /mnt/home/user/.config /mnt/home/"$username"/
  fi
  userrechte
}

function userrechte() {
  arch-chroot /mnt chmod 770 -R -v /home/"$username"/
  arch-chroot /mnt chown -R -v "$username":users /home/"$username"
  arch-chroot /mnt chmod -R -v u+rwX /home/"$username"
  arch-chroot /mnt chmod 755 /home/"$username"
}

function autostart() {
  echo "if [ \$(tty) = "/dev/tty1" ]; then" > /mnt/home/"${username}"/.bash_profile
  echo "startx" >> /mnt/home/"${username}"/.bash_profile
  echo "fi" >> /mnt/home/"${username}"/.bash_profile
  echo "[Service]" > /mnt/etc/systemd/system/getty\@tty1.service.d/autologin.conf
  echo "ExecStart=" >> /mnt/etc/systemd/system/getty\@tty1.service.d/autologin.conf
  echo "ExecStart=-/sbin/agetty --noclear -a ${username} %I 38400 linux" >> /mnt/etc/systemd/system/getty\@tty1.service.d/autologin.conf
}

function removeinstaller {
  echo ""
  if [ -f /mnt/usr/share/applications/arch-install.desktop ]
  then
    rm /mnt/usr/share/applications/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/root/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/root/Schreibtisch/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/home/user/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/home/user/Schreibtisch/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/root/Desktop/arch-install.desktop ]
  then
    rm /mnt/root/Desktop/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/home/user/Desktop/arch-install.desktop ]
  then
    rm /mnt/home/user/Desktop/arch-install.desktop
  fi
  echo ""
}

function offlineinstallation {
  if [ "$offline" != "n" ]
  then
    if [ -f /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs ]
    then
      echo "Es ist kein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs
    else
      echo "Es ist ein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/copytoram/airootfs.sfs
    fi
    echo ""
    echo "MODULES=\"i915 radeon\"" > /mnt/etc/mkinitcpio.conf
    echo "HOOKS=\"systemd block filesystems\"" > /mnt/etc/mkinitcpio.conf
    echo "COMPRESSION=\"xz\"" >> /mnt/etc/mkinitcpio.conf
    echo ""
    #cp /etc/X11/xinit/xinitrc /mnt/etc/X11/xinit/xinitrc
    #
    echo ""
    genfstab -Up /mnt >> /mnt/etc/fstab
    #echo "swap"
    #swap
    echo ""
    echo "$name"s-os > /mnt/etc/hostname
    echo ""
  fi
}

function formatieren {
  #root
  #swap
  #boot
  echo "format"
  mkfs.btrfs -L p_arch "$device"1
  mkswap -L p_swap "$device"2
  mkfs.fat -F32 "$device"3
  echo "mount"
  mount "$device"1 /mnt
  mkdir -p /mnt/boot
  mount "$device"3 /mnt/boot
}

function update() {
  #statements
  local if="${1}"
  local of="${2}"
  local parameters="${3}"
  local before="${4}"
  if [ -f $of ]
  then
    rm $of
  else
    echo "$of nicht vorhanden!"
  fi
  wget $if -t 0 --output-document="$of"
  chmod +x $of
  [[ -n "${5}" ]] && of="${5}"
  $before $of $parameters
}











if [ "$1" != "n" ]
then
  read -p "Soll im Internet geguckt werden ob es ein neues Install-Script gibt und dann ausgefuehrt werden?: [Y/n] " update
  if [ "$update" != "n" ]
  then
    update https://raw.githubusercontent.com/simono41/Simon-OS/master/arch-install /root/arch-install.new n
    exit 0
  fi
fi

# debug = Installation überspringen zu arch-graphical-install
read -p "Wie heissen sie?: " name
if [ "$name" != "debug" ]
then
  # Partionierung
  # GPT oder MBR
  echo ""
  echo "GPT = GUID Partition Table 64 Bit UEFI"
  echo "Empfohlen fuer Neuere PCs"
  echo "WICHTIG DAFUER MUESSEN SIE IM BOOTMENUE DEN UEFI USB_STICK AUSGEWAEHLT HABEN SONST KANN KEIN UEFI BOOTEINTRAG ERSTELLT WERDEN!!!"
  echo ""
  echo "MBR = Master Boot Record 32 Bit Legacy"
  echo "Empfohlen fuer Alte PCs und portable USB-Sticks"
  echo ""
  echo "Bitte die Eingaben klein schreiben :D !!!"
  echo ""
  read -p "Wie moechten sie ihre Festplatte partioniert haben: [gpt/MBR] " Partition
  if [ "$Partition" == "gpt" ]
  then
    read -p "Soll mit systemd gebootet werden oder mit grub? [systemd/GRUB] : " boot
  fi
  fdisk -l
  read -p "Geben sie eine Festplatte an: /dev/sda " device
  read -p "Welches Passwort soll der Root erhalten?: root " pass
  read -p "Soll ein neuer Benutzer erstellt werden?: [Y/n] " user
  if [ "$user" != "n" ]
  then
    read -p "Wie soll der neue Benutzer heissen?: " username
    read -p "Welches Passwort soll der neue Benutzer haben?: " userpass
  fi
  read -p "Wie groß soll die System-Partition sein? +20G : " speicher
  #
  [[ -z "${name}" ]] && name=arch-linux
  [[ -z "${Partition}" ]] && Partition=mbr
  [[ -z "${boot}" ]] && boot=grub
  [[ -z "${device}" ]] && device=/dev/sda
  [[ -z "${pass}" ]] && pass=root
  [[ -z "${username}" ]] && username=user
  [[ -z "${userpass}" ]] && userpass=user
  [[ -z "${speicher}" ]] && speicher="+20G"

  #
  echo "Name: $name"
  echo "Partionsart: $Partition"
  echo "Bootloader: $boot"
  echo "Laufwerk: $device"
  echo "System-Partition $speicher"
  echo "Rootpasswort: $pass"
  echo "Architektur: $(uname -m)"
  if [ "$user" != "n" ]
  then
    echo "Username: $username"
    echo "Userpasswort: $userpass"
  fi
  #
  read -p "Sind alle Angaben Richtig?: [y/N] " sicherheitsabfrage
  if [ "$sicherheitsabfrage" != "y" ]
  then
    echo "ABGEBROCHEN"
    exit 1
  fi
  #
  if cat /proc/mounts | grep "$device"1 > /dev/null; then
    echo "gemountet"
    umount "$device"1
  else
    echo "nicht gemountet"
  fi
  #
  if cat /proc/mounts | grep "$device"2 > /dev/null; then
    echo "gemountet"
    umount "$device"2
  else
    echo "nicht gemountet"
  fi
  #
  if cat /proc/mounts | grep "$device"3 > /dev/null; then
    echo "gemountet"
    umount "$device"2
  else
    echo "nicht gemountet"
  fi
  #
  if cat /proc/mounts | grep /mnt > /dev/null; then
    echo "gemountet"
    umount /mnt
  else
    echo "nicht gemountet"
  fi
  #
  echo "Eine Säuberung erhört die chance der Installation auf dem System."
  echo "Es kann eine Zeit lang dauern!"
  dd if=/dev/zero of="$device" bs=64M count=10 status=progress
  #
  if [ "$Partition" == "gpt" ]
  then
    echo "Partioniere in GPT"
      gdisk "$device" <<EOT
2
p
o
y
n


${speicher}
8300
p
n


+1024M
8200
p
n


+512M
ef00
p
w
y
EOT
    echo "formatieren"
    formatieren
    echo "offlineinstallation"
    offlineinstallation
  arch-chroot /mnt /bin/bash <<EOT
  mkinitcpio -p linux
  passwd
  $pass
  $pass
EOT
    echo ""
    if [ "$boot" == "grub" ]
    then
  arch-chroot /mnt /bin/bash <<EOT
  grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id="$name"s-os --recheck
  grub-mkconfig -o /boot/grub/grub.cfg
EOT
    else
      tobootdevice=$(blkid -s PARTUUID -o value "$device"1)

      mkdir -p /mnt/boot/EFI/systemd/
      mkdir -p /mnt/boot/EFI/BOOT/
      cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/systemd/systemd-bootx64.efi
      cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/BOOT/BOOTX64.EFI

      mkdir -p /mnt/boot/loader/entries/
      echo "title    "$name"s-os" > /mnt/boot/loader/entries/arch-uefi.conf
      echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch-uefi.conf
      echo "initrd   /initramfs-linux.img" >> /mnt/boot/loader/entries/arch-uefi.conf
      echo "options  root=PARTUUID=${tobootdevice} rw" >> /mnt/boot/loader/entries/arch-uefi.conf

      echo "title    "$name"s-os" > /mnt/boot/loader/entries/arch-uefi-fallback.conf
      echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf
      echo "initrd   /initramfs-linux-fallback.img" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf
      echo "options  root=PARTUUID=${tobootdevice} rw" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf

      echo "default   arch-uefi" > /mnt/boot/loader/loader.conf
      echo "timeout   1" >> /mnt/boot/loader/loader.conf

    fi
    if [ "$user" != "n" ]
    then
      adduser
      autostart
    fi
    removeinstaller
    echo "Fertig"
elif [ "$Partition" == "mbr" ]
  then
    echo "Partioniere in MBR"
        fdisk -W always "$device" <<EOT
p
o
n



${speicher}
p
n



+1024M
p
n



+512M
p
w
y
EOT
    echo "formatieren"
    formatieren
    echo "offlineinstallation"
    offlineinstallation
  arch-chroot /mnt /bin/bash <<EOT
  mkinitcpio -p linux
  passwd
  $pass
  $pass
  grub-install --target=i386-pc --recheck "$device"
  grub-mkconfig -o /boot/grub/grub.cfg
EOT
    if [ "$user" != "n" ]
    then
      adduser
      autostart
    fi
    removeinstaller
    echo "Fertig"
  else
    echo "Eingabe Ungueltig"
    exit 1
  fi
fi

read -p "Soll eine graphische Installation durchgeführt werden? [Y/n] " graphical
if [ "$graphical" != "n" ]
then
  update https://raw.githubusercontent.com/simono41/Simon-OS/master/arch-graphical-install /mnt/root/arch-graphical-install n "arch-chroot /mnt/" /root/arch-graphical-install
fi
echo ""
echo "Fertig!!!"
read -p "Installation erfolgreich Abgeschlossen. Wollen sie den PC NEUSTARTEN?: [Y/n] " sicherheitsabfrage
if [ "$sicherheitsabfrage" != "n" ]
then
  echo "starte neu"
  reboot
fi
exit 0
