#!/bin/bash
#
set -ex

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi
echo "Als root Angemeldet"

function swap() {
  #swap
  fallocate -l 512M /mnt/swapfile
  chmod 600 /mnt/swapfile
  mkswap /mnt/swapfile
  echo "/swapfile none swap defaults 0 0" >> /mnt/etc/fstab
}

function adduser() {
  useradd ${username}
  passwd ${username}
  ${userpass}
  ${userpass}
  mkdir -p /home/"${username}"/
  echo ""${username}" ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
  userrechte
  autostart
}

function userrechte() {
  chmod 770 -R -v /home/"${username}"/
  chown -R -v "${username}":"${username}" /home/"${username}"
  chmod -R -v u+rwX /home/"${username}"
  chmod 755 /home/"${username}"
}

function autostart() {
  echo "if [ \$(tty) = "/dev/tty1" ]; then" > /home/"${username}"/.bash_profile
  echo "startx" >> /home/"${username}"/.bash_profile
  echo "fi" >> /home/"${username}"/.bash_profile
  echo "[Service]" > /etc/systemd/system/getty\@tty1.service.d/autologin.conf
  echo "ExecStart=" >> /etc/systemd/system/getty\@tty1.service.d/autologin.conf
  echo "ExecStart=-/sbin/agetty --noclear -a ${username} %I 38400 linux" >> /etc/systemd/system/getty\@tty1.service.d/autologin.conf
}

function removeinstaller {
  echo ""
  if [ -f /mnt/usr/share/applications/arch-install.desktop ]
  then
    rm /mnt/usr/share/applications/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/root/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/root/Schreibtisch/arch-install.desktop
  fi
  echo ""
  if [ -f /mnt/home/user/Schreibtisch/arch-install.desktop ]
  then
    rm /mnt/home/user/Schreibtisch/arch-install.desktop
  fi
  echo ""
}

function offlineinstallation {
  if [ "$offline" != "n" ]
  then
    if [ -f /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs ]
    then
      echo "Es ist kein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs
    else
      echo "Es ist ein copytoram System."
      unsquashfs -f -d /mnt/ /run/archiso/copytoram/airootfs.sfs
    fi
    echo ""
    echo "MODULES=\"i915\"" > /mnt/etc/mkinitcpio.conf
    echo "HOOKS=\"systemd block filesystems\"" > /mnt/etc/mkinitcpio.conf
    echo "COMPRESSION=\"gzip\"" >> /mnt/etc/mkinitcpio.conf
    echo ""
    #cp /etc/X11/xinit/xinitrc /mnt/etc/X11/xinit/xinitrc
    #
    echo ""
    genfstab -Up /mnt >> /mnt/etc/fstab
    echo "swap"
    swap
    echo ""
    echo "$name"-os > /mnt/etc/hostname
    echo ""
  fi
}

function formatieren {
  echo "format"
  mkfs.ext4 -L p_arch /dev/"$device"2
  mkfs.fat -F32 /dev/"$device"1
  echo "mount"
  mount /dev/"$device"2 /mnt
  mkdir /mnt/boot
  mount /dev/"$device"1 /mnt/boot
}











if [ "$1" != "n" ]
then
  read -p "Soll im Internet geguckt werden ob es ein neues Install-Script gibt und dann ausgefuehrt werden?: [Y/n] " update
  if [ "$update" != "n" ]
  then
    if [ -f /root/arch-install.new ]
    then
      rm /root/arch-install.new
    else
      echo "arch-install.new nicht vorhanden!"
    fi
    wget https://raw.githubusercontent.com/simono41/Arch-Install-Script/master/arch-install -t 0 --output-document=/root/arch-install.new
    chmod +x /root/arch-install.new
    /root/arch-install.new n
    exit 0
  fi
else
  echo "Bereits neue Version im Internet!"
fi
# Partionierung
# GPT oder MBR
read -p "Wie heissen sie?: " name
echo ""
echo "GPT = GUID Partition Table 64 Bit UEFI"
echo "Empfohlen fuer Neuere PCs"
echo "WICHTIG DAFUER MUESSEN SIE IM BOOTMENUE DEN UEFI USB_STICK AUSGEWAEHLT HABEN SONST KANN KEIN UEFI BOOTEINTRAG ERSTELLT WERDEN!!!"
echo ""
echo "MBR = Master Boot Record 32 Bit Legacy"
echo "Empfohlen fuer Alte PCs und portable USB-Sticks"
echo ""
echo "Bitte die Eingaben klein schreiben :D !!!"
echo ""
read -p "Wie moechten sie ihre Festplatte partioniert haben: gpt oder mbr: " Partition
if [ "$Partition" == "gpt" ]
then
  read -p "Soll mit systemd gebootet werden oder mit grub? [systemd/grub] : " boot
fi
fdisk -l
read -p "Geben sie eine Festplatte an: sda,sdb,sdc: " device
read -p "Welches Passwort soll der Root erhalten?: " pass
read -p "Soll ein neuer Benutzer erstellt werden?: [Y/n] " user
if [ "$user" != "n" ]
then
  read -p "Wie soll der neue Benutzer heissen?: " username
  read -p "Welches Passwort soll der neue Benutzer haben?: " userpass
fi
read -p "Wie groß soll die System-Partition sein? (wenn nichts eingetragen wird wird die volle Festplatte benutzt!!!): z.b +20G : " speicher
#
[[ -z "${name}" ]] && echo "Wählen sie einen Namen!" && sleep 5 && exit 1
[[ -z "${Partition}" ]] && Partition=gpt
[[ -z "${boot}" ]] && boot=grub
[[ -z "${device}" ]] && echo "Wählen sie eine Festplatte aus!" && sleep 5 && exit 1
[[ -z "${pass}" ]] && pass=root
if [ -z "$speicher" ]; then
  echo "Ganze Festplatte"
else
  echo "System-Partition $speicher"
fi
#
echo "Name: $name"
echo "Partionsart: $Partition"
echo "Bootloader: $boot"
echo "Laufwerk: /dev/"$device""
echo "Rootpasswort: $pass"
echo "Architektur: $(uname -m)"
echo "Username: $username"
echo "Userpasswort: $userpass"
#
read -p "Sind alle Angaben Richtig?: [y/N] " sicherheitsabfrage
if [ "$sicherheitsabfrage" != "y" ]
then
  echo "ABGEBROCHEN"
  exit 1
fi
#
if cat /proc/mounts | grep /dev/"$device"1 > /dev/null; then
  echo "gemountet"
  umount /dev/"$device"1
else
  echo "nicht gemountet"
fi
#
if cat /proc/mounts | grep /dev/"$device"2 > /dev/null; then
  echo "gemountet"
  umount /dev/"$device"2
else
  echo "nicht gemountet"
fi
#
if cat /proc/mounts | grep /dev/"$device"3 > /dev/null; then
  echo "gemountet"
  umount /dev/"$device"2
else
  echo "nicht gemountet"
fi
#
if cat /proc/mounts | grep /mnt > /dev/null; then
  echo "gemountet"
  umount /mnt
else
  echo "nicht gemountet"
fi
#
echo "Eine Säuberung erhört die chance der Installation auf dem System."
echo "Es kann eine Zeit lang dauern!"
dd if=/dev/zero of=/dev/$device bs=64M count=10 status=progress
#
if [ "$Partition" == "gpt" ]
then
  echo "Partioniere in GPT"
    gdisk "/dev/$device" <<EOT
2
p
o
y
n


+512M
ef00
p
n


${speicher}
8300
p
w
y
EOT
  echo "formatieren"
  formatieren
  echo "offlineinstallation"
  offlineinstallation
arch-chroot /mnt /bin/bash <<EOT
mkinitcpio -p linux
passwd
$pass
$pass
EOT
  echo ""
  if [ "$boot" == "grub" ]
  then
arch-chroot /mnt /bin/bash <<EOT
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id="$name"-os --recheck
grub-mkconfig -o /boot/grub/grub.cfg
EOT
  else
    tobootdevice=$(blkid -s PARTUUID -o value /dev/"$device"2)

    mkdir -p /mnt/boot/EFI/systemd/
    mkdir -p /mnt/boot/EFI/BOOT/
    cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/systemd/systemd-bootx64.efi
    cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/BOOT/BOOTX64.EFI

    mkdir -p /mnt/boot/loader/entries/
    echo "title    "$name"-os" > /mnt/boot/loader/entries/arch-uefi.conf
    echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch-uefi.conf
    echo "initrd   /initramfs-linux.img" >> /mnt/boot/loader/entries/arch-uefi.conf
    echo "options  root=PARTUUID=${tobootdevice} rw" >> /mnt/boot/loader/entries/arch-uefi.conf

    echo "title    "$name"-os" > /mnt/boot/loader/entries/arch-uefi-fallback.conf
    echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf
    echo "initrd   /initramfs-linux-fallback.img" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf
    echo "options  root=PARTUUID=${tobootdevice} rw" >> /mnt/boot/loader/entries/arch-uefi-fallback.conf

    echo "default   arch-uefi" > /mnt/boot/loader/loader.conf
    echo "timeout   1" >> /mnt/boot/loader/loader.conf

  fi
  adduser
  removeinstaller
  echo "Fertig"
elif [ "$Partition" == "mbr" ]
then
  echo "Partioniere in MBR"
      fdisk -W always "/dev/$device" <<EOT
p
o
n



+512M
p
n



${speicher}
p
w
y
EOT
  echo "formatieren"
  formatieren
  echo "offlineinstallation"
  offlineinstallation
arch-chroot /mnt /bin/bash <<EOT
mkinitcpio -p linux
passwd
$pass
$pass
grub-install --target=i386-pc --recheck /dev/"$device"
grub-mkconfig -o /boot/grub/grub.cfg
EOT
  adduser
  removeinstaller
  echo "Fertig"
else
  echo "Eingabe Ungueltig"
  exit 1
fi
echo ""
echo "Fertig!!!"
read -p "Installation erfolgreich Abgeschlossen. Wollen sie den PC NEUSTARTEN?: [Y/n] " sicherheitsabfrage
if [ "$sicherheitsabfrage" != "n" ]
then
  echo "starte neu"
  reboot
fi
exit 0
