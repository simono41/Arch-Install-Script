#!/bin/bash
#
set -ex

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi
echo "Als root Angemeldet"

mountpoint="/mnt/btrfs-current"

function swapfile() {
  #swap
  fallocate -l 512M ${mountpoint}/swapfile
  chmod 600 ${mountpoint}/swapfile
  mkswap ${mountpoint}/swapfile
  echo "/swapfile none swap defaults 0 0" >> ${mountpoint}/etc/fstab
}

function adduser() {
  arch-chroot ${mountpoint} useradd -m -g users -s /bin/bash ${username}
arch-chroot ${mountpoint} passwd ${username} <<EOT
${userpass}
${userpass}
EOT
  mkdir -p ${mountpoint}/home/"${username}"/
  echo ""${username}" ALL=(ALL) NOPASSWD: ALL" >> ${mountpoint}/etc/sudoers
  echo ""
  if [ -d ${mountpoint}/home/user/.config ]
  then
    cp -R ${mountpoint}/home/user/.config ${mountpoint}/home/"${username}"/
  fi
  userrechte
}

function userrechte() {
  arch-chroot ${mountpoint} chmod 770 -R -v /home/"${username}"/
  arch-chroot ${mountpoint} chown -R -v "${username}":users /home/"${username}"
  arch-chroot ${mountpoint} chmod -R -v u+rwX /home/"${username}"
  arch-chroot ${mountpoint} chmod 755 /home/"${username}"
}

function autostart() {
  echo "if [ \$(tty) = "/dev/tty1" ]; then" > ${mountpoint}/home/"${username}"/.bash_profile
  echo "startx" >> ${mountpoint}/home/"${username}"/.bash_profile
  echo "fi" >> ${mountpoint}/home/"${username}"/.bash_profile
  echo "[Service]" > ${mountpoint}/etc/systemd/system/getty\@tty1.service.d/autologin.conf
  echo "ExecStart=" >> ${mountpoint}/etc/systemd/system/getty\@tty1.service.d/autologin.conf
  echo "ExecStart=-/sbin/agetty --noclear -a ${username} %I 38400 linux" >> ${mountpoint}/etc/systemd/system/getty\@tty1.service.d/autologin.conf
}

function removeinstaller {
  echo ""
  if [ -f ${mountpoint}/usr/share/applications/arch-install.desktop ]
  then
    rm ${mountpoint}/usr/share/applications/arch-install.desktop
  fi
  echo ""
  if [ -f ${mountpoint}/root/Schreibtisch/arch-install.desktop ]
  then
    rm ${mountpoint}/root/Schreibtisch/arch-install.desktop
  fi
  echo ""
  if [ -f ${mountpoint}/home/user/Schreibtisch/arch-install.desktop ]
  then
    rm ${mountpoint}/home/user/Schreibtisch/arch-install.desktop
  fi
  echo ""
  if [ -f ${mountpoint}/root/Desktop/arch-install.desktop ]
  then
    rm ${mountpoint}/root/Desktop/arch-install.desktop
  fi
  echo ""
  if [ -f ${mountpoint}/home/user/Desktop/arch-install.desktop ]
  then
    rm ${mountpoint}/home/user/Desktop/arch-install.desktop
  fi
  echo ""
}

function offlineinstallation {
  if [ "${offline}" != "n" ]
  then
    if [ -f /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs ]
    then
      echo "Es ist kein copytoram System."
      unsquashfs -f -d ${mountpoint} /run/archiso/bootmnt/arch/$(uname -m)/airootfs.sfs
    else
      echo "Es ist ein copytoram System."
      unsquashfs -f -d ${mountpoint} /run/archiso/copytoram/airootfs.sfs
    fi
    echo ""
    echo "MODULES=\"i915 radeon\"" > ${mountpoint}/etc/mkinitcpio.conf
    echo "HOOKS=\"base udev block filesystems keyboard\"" >> ${mountpoint}/etc/mkinitcpio.conf
    echo "COMPRESSION=\"xz\"" >> ${mountpoint}/etc/mkinitcpio.conf
    echo ""
    #cp /etc/X11/xinit/xinitrc ${mountpoint}/etc/X11/xinit/xinitrc
    #
    echo ""
    echo "tmpfs /tmp tmpfs nodev,nosuid 0 0" >> ${mountpoint}/etc/fstab
    echo "tmpfs /dev/shm tmpfs nodev,nosuid,noexec 0 0" >> ${mountpoint}/etc/fstab

    genfstab -Up ${mountpoint} >> ${mountpoint}/etc/fstab

    rootbind=$(blkid -s UUID -o value ${device}2)
    mkdir -p ${mountpoint}/run/btrfs-root
    echo "UUID=${rootbind} /run/btrfs-root/ btrfs nodev,nosuid,noexec 0 0" >> ${mountpoint}/etc/fstab

    grep -v "/var/lib" < ${mountpoint}/etc/fstab > fstab.neu; mv fstab.neu ${mountpoint}/etc/fstab

    echo "/run/btrfs-root/__current/ROOT/var/lib /var/lib none bind 0 0" >> ${mountpoint}/etc/fstab

    swappartition=$(blkid -s UUID -o value ${device}3)
    echo "UUID=${swappartition} none swap defaults 0 0" >> ${mountpoint}/etc/fstab
    #echo "swap"
    #swap
    echo ""
    echo "${name}"s-os > ${mountpoint}/etc/hostname
    echo ""
  fi
}

function formatieren {
  #boot
  #root
  #swap
  echo "format"
  mkfs.fat -F32 ${device}1
  mkfs.btrfs -L p_arch ${device}2
  mkswap -L p_swap ${device}3
  #echo "mount"
  #mount ${device}1 ${mountpoint}
  echo "subvolume"
  subvolume
  mkdir -p ${mountpoint}/boot
  btrfsmount 5
}

function btrfsmount() {
[[ -z "${device}" ]] && device=${2}
if [ "${1}" == "1" ] || [ "${1}" == "all" ]
then
  mount -o defaults,relatime,discard,ssd ${device}2 /mnt/btrfs-root
fi
if [ "${1}" == "2" ] || [ "${1}" == "all" ]
then
  mount -o defaults,relatime,discard,ssd,nodev,subvol=__current/ROOT ${device}2 ${mountpoint}
fi
if [ "${1}" == "3" ] || [ "${1}" == "all" ]
then
  mount -o defaults,relatime,discard,ssd,nodev,subvol=__current/home ${device}2 ${mountpoint}/home
  mount -o defaults,relatime,discard,ssd,nodev,subvol=__current/opt ${device}2 ${mountpoint}/opt
  mount -o defaults,relatime,discard,ssd,nodev,noexec,subvol=__current/var ${device}2 ${mountpoint}/var
fi
if [ "${1}" == "4" ] || [ "${1}" == "all" ]
then
  mount --bind /mnt/btrfs-root/__current/ROOT/var/lib ${mountpoint}/var/lib
fi
if [ "${1}" == "5" ] || [ "${1}" == "all" ]
then
  mount ${device}1 ${mountpoint}/boot
fi
}

function subvolume() {

  # Mount
  mkdir -p /mnt/btrfs-root
  btrfsmount 1

  # Create
  mkdir -p /mnt/btrfs-root/__snapshot
  mkdir -p /mnt/btrfs-root/__current
  btrfs subvolume create /mnt/btrfs-root/__current/ROOT
  btrfs subvolume create /mnt/btrfs-root/__current/home
  btrfs subvolume create /mnt/btrfs-root/__current/opt
  btrfs subvolume create /mnt/btrfs-root/__current/var

  btrfs subvolume list -p /mnt/btrfs-root

  # Mount
  mkdir -p ${mountpoint}

  btrfsmount 2
  mkdir -p ${mountpoint}/home
  mkdir -p ${mountpoint}/opt
  mkdir -p ${mountpoint}/var/lib

  btrfsmount 3

  mkdir -p ${mountpoint}/var/lib
  btrfsmount 4



}

function update() {
  #statements
  local if="${1}"
  local of="${2}"
  local parameters="${3}"
  local before="${4}"
  if [ -f "${of}" ]
  then
    rm ${of}
  else
    echo "${of} nicht vorhanden!"
  fi
  wget ${if} -t 0 --output-document=${of}
  chmod +x ${of}
  [[ -n "${5}" ]] && of=${5}
  ${before} ${of} ${parameters}
}











if [ "${1}" != "n" ]
then
  read -p "Soll im Internet geguckt werden ob es ein neues Install-Script gibt und dann ausgefuehrt werden?: [Y/n] " update
  if [ "${update}" != "n" ]
  then
    update https://raw.githubusercontent.com/simono41/Simon-OS/master/arch-install /root/arch-install.new n
    exit 0
  fi
fi

# debug = Installation überspringen zu arch-graphical-install
read -p "Wie heissen sie?: " name
if [ "${name}" != "debug" ]
then
  # Partionierung
  # GPT oder MBR
  echo ""
  echo "GPT = GUID Partition Table 64 Bit UEFI"
  echo "Empfohlen fuer Neuere PCs"
  echo "WICHTIG DAFUER MUESSEN SIE IM BOOTMENUE DEN UEFI USB_STICK AUSGEWAEHLT HABEN SONST KANN KEIN UEFI BOOTEINTRAG ERSTELLT WERDEN!!!"
  echo ""
  echo "MBR = Master Boot Record 32 Bit Legacy"
  echo "Empfohlen fuer Alte PCs und portable USB-Sticks"
  echo ""
  echo "Bitte die Eingaben klein schreiben :D !!!"
  echo ""
  read -p "Wie moechten sie ihre Festplatte partioniert haben: [gpt/MBR] " Partition
  if [ "${Partition}" == "gpt" ]
  then
    read -p "Soll mit systemd gebootet werden oder mit grub? [systemd/GRUB] : " boot
  fi
  fdisk -l
  read -p "Geben sie eine Festplatte an: /dev/sda " device
  read -p "Welches Passwort soll der Root erhalten?: root " pass
  read -p "Soll ein neuer Benutzer erstellt werden?: [Y/n] " user
  if [ "${user}" != "n" ]
  then
    read -p "Wie soll der neue Benutzer heissen?: " username
    read -p "Welches Passwort soll der neue Benutzer haben?: " userpass
  fi
  read -p "Wie groß soll die System-Partition sein? +20G : " speicher
  #
  [[ -z "${name}" ]] && name=arch-linux
  [[ -z "${Partition}" ]] && Partition=mbr
  [[ -z "${boot}" ]] && boot=grub
  [[ -z "${device}" ]] && device=/dev/sda
  [[ -z "${pass}" ]] && pass=root
  [[ -z "${username}" ]] && username=user
  [[ -z "${userpass}" ]] && userpass=user
  [[ -z "${speicher}" ]] && speicher="+20G"

  #
  echo "Name: ${name}"
  echo "Partionsart: ${Partition}"
  echo "Bootloader: ${boot}"
  echo "Laufwerk: ${device}"
  echo "System-Partition ${speicher}"
  echo "Rootpasswort: ${pass}"
  echo "Architektur: $(uname -m)"
  if [ "${user}" != "n" ]
  then
    echo "Username: ${username}"
    echo "Userpasswort: ${userpass}"
  fi
  #
  read -p "Sind alle Angaben Richtig?: [y/N] " sicherheitsabfrage
  if [ "$sicherheitsabfrage" != "y" ]
  then
    echo "ABGEBROCHEN"
    exit 1
  fi
  #
  if cat /proc/mounts | grep ${device}1 > /dev/null; then
    echo "gemountet"
    umount ${device}1
  else
    echo "nicht gemountet"
  fi
  #
  if cat /proc/mounts | grep ${device}2 > /dev/null; then
    echo "gemountet"
    umount ${device}2
  else
    echo "nicht gemountet"
  fi
  #
  if cat /proc/mounts | grep ${device}3 > /dev/null; then
    echo "gemountet"
    umount ${device}2
  else
    echo "nicht gemountet"
  fi
  #
  if cat /proc/mounts | grep /mnt > /dev/null; then
    echo "gemountet"
    umount /mnt
  else
    echo "nicht gemountet"
  fi
  #
  echo "Eine Säuberung erhört die chance der Installation auf dem System."
  echo "Es kann eine Zeit lang dauern!"
  dd if=/dev/zero of=${device} bs=64M count=10 status=progress
  #
  if [ "${Partition}" == "gpt" ]
  then
    echo "Partioniere in GPT"
      gdisk ${device} <<EOT
2
p
o
y
n


+512M
ef00
p
n


${speicher}
8300
p
n


+1024M
8200
p
w
y
EOT
    echo "formatieren"
    formatieren
    echo "offlineinstallation"
    offlineinstallation
  arch-chroot ${mountpoint} /bin/bash <<EOT
mkinitcpio -p linux
passwd
${pass}
${pass}
EOT
    echo ""
    if [ "${boot}" == "grub" ]
    then
  arch-chroot ${mountpoint} /bin/bash <<EOT
  grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id="${name}"s-os --recheck
  grub-mkconfig -o /boot/grub/grub.cfg
EOT
    else
      tobootdevice=$(blkid -s PARTUUID -o value ${device}2)

      mkdir -p ${mountpoint}/boot/EFI/systemd/
      mkdir -p ${mountpoint}/boot/EFI/BOOT/
      cp ${mountpoint}/usr/lib/systemd/boot/efi/systemd-bootx64.efi ${mountpoint}/boot/EFI/systemd/systemd-bootx64.efi
      cp ${mountpoint}/usr/lib/systemd/boot/efi/systemd-bootx64.efi ${mountpoint}/boot/EFI/BOOT/BOOTX64.EFI

      mkdir -p ${mountpoint}/boot/loader/entries/
      echo "title    "${name}"s-os" > ${mountpoint}/boot/loader/entries/arch-uefi.conf
      echo "linux    /vmlinuz-linux" >> ${mountpoint}/boot/loader/entries/arch-uefi.conf
      echo "initrd   /intel-ucode.img" >> ${mountpoint}/boot/loader/entries/arch-uefi.conf
      echo "initrd   /initramfs-linux.img" >> ${mountpoint}/boot/loader/entries/arch-uefi.conf
      echo "options  root=PARTUUID=${tobootdevice} rw rootflags=subvol=__current/ROOT" >> ${mountpoint}/boot/loader/entries/arch-uefi.conf

      echo "title    "${name}"s-os" > ${mountpoint}/boot/loader/entries/arch-uefi-fallback.conf
      echo "linux    /vmlinuz-linux" >> ${mountpoint}/boot/loader/entries/arch-uefi-fallback.conf
      echo "initrd   /intel-ucode.img" >> ${mountpoint}/boot/loader/entries/arch-uefi-fallback.conf
      echo "initrd   /initramfs-linux-fallback.img" >> ${mountpoint}/boot/loader/entries/arch-uefi-fallback.conf
      echo "options  root=PARTUUID=${tobootdevice} rw rootflags=subvol=__current/ROOT" >> ${mountpoint}/boot/loader/entries/arch-uefi-fallback.conf

      echo "default   arch-uefi" > ${mountpoint}/boot/loader/loader.conf
      echo "timeout   1" >> ${mountpoint}/boot/loader/loader.conf

    fi
    if [ "${user}" != "n" ]
    then
      adduser
      autostart
    fi
    removeinstaller
    echo "Fertig"
elif [ "${Partition}" == "mbr" ]
  then
    echo "Partioniere in MBR"
        fdisk -W always ${device} <<EOT
p
o
n



+512M
p
n



${speicher}
p
n



+1024M
p
w
y
EOT
    echo "formatieren"
    formatieren
    echo "offlineinstallation"
    offlineinstallation
  arch-chroot ${mountpoint} /bin/bash <<EOT
mkinitcpio -p linux
passwd
${pass}
${pass}
grub-install --target=i386-pc --recheck ${device}
grub-mkconfig -o /boot/grub/grub.cfg
EOT
    if [ "${user}" != "n" ]
    then
      adduser
      autostart
    fi
    removeinstaller
    echo "Fertig"
  else
    echo "Eingabe Ungueltig"
    exit 1
  fi
fi

if [ "${name}" == "debug" ]
then
  echo "DEBEUG-MODUS"
  echo "Wenn kein befehl mehr ausgefuehrt werden muss einfach eingabetaste druecken"
  echo "Welcher befehl soll ausgefuert werden? : " befehl

  befehl=blablabla
  while [ "$befehl" != "" ]
  do
    read -p "" befehl
    $befehl
  done

fi

read -p "Soll eine graphische Installation durchgeführt werden? [Y/n] " graphical
if [ "$graphical" != "n" ]
then
  update https://raw.githubusercontent.com/simono41/Simon-OS/master/arch-graphical-install ${mountpoint}/root/arch-graphical-install n "arch-chroot ${mountpoint}" /root/arch-graphical-install
fi
echo "umount!!!"
umount ${mountpoint}/home
umount ${mountpoint}/opt
umount ${mountpoint}/var/lib
umount ${mountpoint}/var
umount ${mountpoint}/boot
umount ${mountpoint}
umount /mnt/btrfs-root
echo ""
echo "Fertig!!!"
read -p "Installation erfolgreich Abgeschlossen. Wollen sie den PC NEUSTARTEN?: [Y/n] " sicherheitsabfrage
if [ "$sicherheitsabfrage" != "n" ]
then
  echo "starte neu"
  reboot
fi
exit 0
v
